#!/usr/bin/env python3
"""
Security Metrics Extraction Tool for BFSI Applications

This script extracts security metrics from SARIF files generated by CodeQL 
and other security tools, specifically tailored for Banking, Financial 
Services, and Insurance (BFSI) applications.

Author: Security Architecture Team
Version: 1.0.0
"""

import json
import argparse
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional
import glob


class SecurityMetricsExtractor:
    """Extract and process security metrics from SARIF files."""
    
    def __init__(self):
        self.metrics = {
            "timestamp": datetime.utcnow().isoformat(),
            "total_results": 0,
            "severity_breakdown": {
                "critical": 0,
                "high": 0,
                "medium": 0,
                "low": 0,
                "note": 0
            },
            "rule_breakdown": {},
            "compliance_mapping": {},
            "bfsi_specific": {
                "payment_security": 0,
                "data_protection": 0,
                "authentication": 0,
                "encryption": 0,
                "regulatory_compliance": 0
            },
            "files_analyzed": 0,
            "scan_coverage": {},
            "risk_score": 0.0
        }
        
    def process_sarif_directory(self, sarif_dir: str) -> Dict[str, Any]:
        """Process all SARIF files in the given directory."""
        sarif_files = glob.glob(os.path.join(sarif_dir, "**/*.sarif"), recursive=True)
        
        if not sarif_files:
            print(f"Warning: No SARIF files found in {sarif_dir}")
            return self.metrics
            
        print(f"Found {len(sarif_files)} SARIF file(s) to process")
        
        for sarif_file in sarif_files:
            try:
                self._process_sarif_file(sarif_file)
            except Exception as e:
                print(f"Error processing {sarif_file}: {e}")
                continue
                
        self._calculate_risk_score()
        return self.metrics
        
    def _process_sarif_file(self, sarif_file: str) -> None:
        """Process a single SARIF file."""
        print(f"Processing: {sarif_file}")
        
        with open(sarif_file, 'r', encoding='utf-8') as f:
            sarif_data = json.load(f)
            
        for run in sarif_data.get('runs', []):
            self._process_run(run)
            
    def _process_run(self, run: Dict[str, Any]) -> None:
        """Process a single run from SARIF data."""
        results = run.get('results', [])
        self.metrics["total_results"] += len(results)
        
        # Process results
        for result in results:
            self._process_result(result)
            
        # Process artifacts (files analyzed)
        artifacts = run.get('artifacts', [])
        self.metrics["files_analyzed"] += len(artifacts)
        
    def _process_result(self, result: Dict[str, Any]) -> None:
        """Process a single security finding."""
        # Extract severity
        level = result.get('level', 'note').lower()
        if level in self.metrics["severity_breakdown"]:
            self.metrics["severity_breakdown"][level] += 1
        else:
            self.metrics["severity_breakdown"]["note"] += 1
            
        # Extract rule information
        rule_id = result.get('ruleId', 'unknown')
        if rule_id not in self.metrics["rule_breakdown"]:
            self.metrics["rule_breakdown"][rule_id] = 0
        self.metrics["rule_breakdown"][rule_id] += 1
        
        # Map to BFSI categories
        self._categorize_bfsi_finding(rule_id, result)
        
        # Map to compliance frameworks
        self._map_compliance_framework(rule_id, result)
        
    def _categorize_bfsi_finding(self, rule_id: str, result: Dict[str, Any]) -> None:
        """Categorize findings based on BFSI security domains."""
        rule_id_lower = rule_id.lower()
        message = result.get('message', {}).get('text', '').lower()
        
        # Payment security patterns
        if any(term in rule_id_lower or term in message for term in [
            'payment', 'transaction', 'financial', 'credit', 'debit'
        ]):
            self.metrics["bfsi_specific"]["payment_security"] += 1
            
        # Data protection patterns
        elif any(term in rule_id_lower or term in message for term in [
            'pii', 'personal', 'privacy', 'gdpr', 'data-protection'
        ]):
            self.metrics["bfsi_specific"]["data_protection"] += 1
            
        # Authentication patterns
        elif any(term in rule_id_lower or term in message for term in [
            'auth', 'session', 'jwt', 'oauth', 'login', 'password'
        ]):
            self.metrics["bfsi_specific"]["authentication"] += 1
            
        # Encryption patterns
        elif any(term in rule_id_lower or term in message for term in [
            'crypto', 'encrypt', 'hash', 'cipher', 'ssl', 'tls'
        ]):
            self.metrics["bfsi_specific"]["encryption"] += 1
            
        # Regulatory compliance patterns
        elif any(term in rule_id_lower or term in message for term in [
            'compliance', 'rbi', 'sebi', 'iso27001', 'audit'
        ]):
            self.metrics["bfsi_specific"]["regulatory_compliance"] += 1
            
    def _map_compliance_framework(self, rule_id: str, result: Dict[str, Any]) -> None:
        """Map findings to compliance frameworks."""
        # RBI IT Framework mapping
        if any(term in rule_id.lower() for term in [
            'sql-injection', 'xss', 'crypto', 'auth', 'session'
        ]):
            framework = "RBI-IT-Framework"
            if framework not in self.metrics["compliance_mapping"]:
                self.metrics["compliance_mapping"][framework] = 0
            self.metrics["compliance_mapping"][framework] += 1
            
        # ISO 27001 mapping
        if any(term in rule_id.lower() for term in [
            'access-control', 'encryption', 'audit', 'incident'
        ]):
            framework = "ISO27001"
            if framework not in self.metrics["compliance_mapping"]:
                self.metrics["compliance_mapping"][framework] = 0
            self.metrics["compliance_mapping"][framework] += 1
            
        # SEBI mapping
        if any(term in rule_id.lower() for term in [
            'data-integrity', 'governance', 'risk'
        ]):
            framework = "SEBI-Guidelines"
            if framework not in self.metrics["compliance_mapping"]:
                self.metrics["compliance_mapping"][framework] = 0
            self.metrics["compliance_mapping"][framework] += 1
            
    def _calculate_risk_score(self) -> None:
        """Calculate overall risk score based on findings."""
        severity = self.metrics["severity_breakdown"]
        
        # Weight findings by severity
        weighted_score = (
            severity["critical"] * 10 +
            severity["high"] * 7 +
            severity["medium"] * 4 +
            severity["low"] * 2 +
            severity["note"] * 1
        )
        
        # Normalize to 0-100 scale
        if self.metrics["total_results"] > 0:
            self.metrics["risk_score"] = min(100.0, weighted_score / max(1, self.metrics["files_analyzed"]) * 10)
        else:
            self.metrics["risk_score"] = 0.0


def main():
    """Main execution function."""
    parser = argparse.ArgumentParser(
        description="Extract security metrics from SARIF files for BFSI applications"
    )
    parser.add_argument(
        "--sarif-dir", 
        required=True,
        help="Directory containing SARIF files"
    )
    parser.add_argument(
        "--output",
        required=True,
        help="Output file for metrics (JSON format)"
    )
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="Enable verbose output"
    )
    
    args = parser.parse_args()
    
    # Validate input directory
    if not os.path.exists(args.sarif_dir):
        print(f"Error: SARIF directory {args.sarif_dir} does not exist")
        return 1
        
    # Create output directory if needed
    output_dir = os.path.dirname(args.output)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir, exist_ok=True)
        
    # Extract metrics
    extractor = SecurityMetricsExtractor()
    metrics = extractor.process_sarif_directory(args.sarif_dir)
    
    # Write output
    with open(args.output, 'w', encoding='utf-8') as f:
        json.dump(metrics, f, indent=2)
        
    if args.verbose:
        print(f"Metrics extracted successfully:")
        print(f"  Total findings: {metrics['total_results']}")
        print(f"  Files analyzed: {metrics['files_analyzed']}")
        print(f"  Risk score: {metrics['risk_score']:.1f}/100")
        print(f"  Output written to: {args.output}")
        
    return 0


if __name__ == "__main__":
    sys.exit(main())