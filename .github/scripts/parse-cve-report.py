#!/usr/bin/env python3
"""
CVE Analysis and Remediation Documentation Generator
Creates comprehensive CVE analysis with remediation steps for BFSI applications
"""

import json
import sys
import argparse
import requests
from datetime import datetime, timedelta
from pathlib import Path

class CVEAnalyzer:
    def __init__(self):
        self.nvd_api_base = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        self.financial_impact_keywords = [
            "payment", "financial", "banking", "transaction", "money",
            "credit", "debit", "account", "loan", "insurance", "investment"
        ]
        
    def parse_owasp_report(self, report_path):
        """Parse OWASP Dependency Check JSON report"""
        try:
            with open(report_path, 'r') as f:
                report = json.load(f)
            
            vulnerabilities = []
            dependencies = report.get('dependencies', [])
            
            for dep in dependencies:
                if 'vulnerabilities' in dep:
                    for vuln in dep['vulnerabilities']:
                        vulnerabilities.append({
                            'dependency': {
                                'name': dep.get('fileName', ''),
                                'group_id': dep.get('groupId', ''),
                                'artifact_id': dep.get('artifactId', ''),
                                'version': dep.get('version', '')
                            },
                            'cve': vuln.get('name', ''),
                            'severity': vuln.get('severity', ''),
                            'cvss_score': vuln.get('cvssv3', {}).get('baseScore', 0),
                            'description': vuln.get('description', ''),
                            'cwe': vuln.get('cwe', ''),
                            'references': vuln.get('references', [])
                        })
            
            return vulnerabilities
            
        except Exception as e:
            print(f"Error parsing OWASP report: {e}")
            return []

    def analyze_cve(self, cve_id):
        """Get detailed CVE information from NVD"""
        try:
            url = f"{self.nvd_api_base}?cveId={cve_id}"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                vulnerabilities = data.get('vulnerabilities', [])
                
                if vulnerabilities:
                    cve_data = vulnerabilities[0].get('cve', {})
                    return self.parse_cve_data(cve_data)
            
        except Exception as e:
            print(f"Error fetching CVE data for {cve_id}: {e}")
        
        return None

    def parse_cve_data(self, cve_data):
        """Parse CVE data from NVD API response"""
        description = ""
        descriptions = cve_data.get('descriptions', [])
        for desc in descriptions:
            if desc.get('lang') == 'en':
                description = desc.get('value', '')
                break
        
        # Extract CVSS scores
        metrics = cve_data.get('metrics', {})
        cvss_v3 = metrics.get('cvssMetricV31', [])
        cvss_score = 0
        cvss_vector = ""
        
        if cvss_v3:
            cvss_data = cvss_v3[0].get('cvssData', {})
            cvss_score = cvss_data.get('baseScore', 0)
            cvss_vector = cvss_data.get('vectorString', '')
        
        # Check for financial impact
        financial_impact = self.assess_financial_impact(description)
        
        return {
            'id': cve_data.get('id', ''),
            'description': description,
            'cvss_score': cvss_score,
            'cvss_vector': cvss_vector,
            'financial_impact': financial_impact,
            'published_date': cve_data.get('published', ''),
            'last_modified': cve_data.get('lastModified', ''),
            'references': [ref.get('url', '') for ref in cve_data.get('references', [])]
        }

    def assess_financial_impact(self, description):
        """Assess if CVE has potential financial impact"""
        description_lower = description.lower()
        
        # Check for financial keywords
        financial_keywords_found = [
            keyword for keyword in self.financial_impact_keywords
            if keyword in description_lower
        ]
        
        # Categorize impact level
        if financial_keywords_found:
            if any(keyword in description_lower for keyword in ['payment', 'transaction', 'money']):
                return {
                    'level': 'HIGH',
                    'keywords': financial_keywords_found,
                    'reason': 'Direct financial transaction impact'
                }
            else:
                return {
                    'level': 'MEDIUM',
                    'keywords': financial_keywords_found,
                    'reason': 'Potential financial system impact'
                }
        
        return {
            'level': 'LOW',
            'keywords': [],
            'reason': 'No direct financial impact identified'
        }

    def generate_remediation_steps(self, vulnerability):
        """Generate remediation steps for vulnerability"""
        cve_id = vulnerability.get('cve', '')
        severity = vulnerability.get('severity', '').upper()
        dependency = vulnerability.get('dependency', {})
        
        remediation = {
            'priority': self.get_remediation_priority(severity, vulnerability),
            'timeline': self.get_remediation_timeline(severity),
            'steps': [],
            'compliance_requirements': []
        }
        
        # General remediation steps
        remediation['steps'].extend([
            f"1. Update {dependency.get('artifact_id', 'dependency')} to latest secure version",
            "2. Run security tests to ensure functionality is maintained",
            "3. Review code for any usage of deprecated APIs",
            "4. Update documentation and change logs"
        ])
        
        # Add specific steps based on CVE type
        if 'injection' in vulnerability.get('description', '').lower():
            remediation['steps'].extend([
                "5. Review input validation and sanitization",
                "6. Implement parameterized queries if applicable",
                "7. Add input validation unit tests"
            ])
        
        if 'authentication' in vulnerability.get('description', '').lower():
            remediation['steps'].extend([
                "5. Review authentication mechanisms",
                "6. Implement multi-factor authentication",
                "7. Update session management"
            ])
        
        # Add compliance requirements
        if severity in ['HIGH', 'CRITICAL']:
            remediation['compliance_requirements'].extend([
                "RBI IT Framework: Document security incident",
                "ISO 27001: Update risk assessment",
                "SEBI Guidelines: Notify governance committee"
            ])
        
        return remediation

    def get_remediation_priority(self, severity, vulnerability):
        """Determine remediation priority"""
        financial_impact = vulnerability.get('financial_impact', {}).get('level', 'LOW')
        
        if severity == 'CRITICAL' or financial_impact == 'HIGH':
            return 'P0 - Emergency'
        elif severity == 'HIGH' or financial_impact == 'MEDIUM':
            return 'P1 - High'
        elif severity == 'MEDIUM':
            return 'P2 - Medium'
        else:
            return 'P3 - Low'

    def get_remediation_timeline(self, severity):
        """Get expected remediation timeline"""
        timelines = {
            'CRITICAL': '24 hours',
            'HIGH': '72 hours',
            'MEDIUM': '1 week',
            'LOW': '1 month'
        }
        return timelines.get(severity, '1 month')

def main():
    parser = argparse.ArgumentParser(description='Analyze CVEs and generate remediation documentation')
    parser.add_argument('--input', '-i', required=True, help='OWASP Dependency Check JSON report')
    parser.add_argument('--package', '-p', help='Specific package to analyze')
    parser.add_argument('--old-version', help='Old version being updated from')
    parser.add_argument('--new-version', help='New version being updated to')
    parser.add_argument('--output', '-o', default='cve-analysis.json', help='Output file')
    
    args = parser.parse_args()
    
    analyzer = CVEAnalyzer()
    
    # Parse OWASP report
    vulnerabilities = analyzer.parse_owasp_report(args.input)
    
    # Filter by package if specified
    if args.package:
        vulnerabilities = [
            v for v in vulnerabilities
            if args.package.lower() in v['dependency']['artifact_id'].lower()
        ]
    
    # Analyze each vulnerability
    detailed_analysis = []
    for vuln in vulnerabilities:
        cve_id = vuln['cve']
        
        # Get detailed CVE information
        cve_details = analyzer.analyze_cve(cve_id)
        if cve_details:
            vuln.update(cve_details)
        
        # Generate remediation steps
        vuln['remediation'] = analyzer.generate_remediation_steps(vuln)
        
        detailed_analysis.append(vuln)
    
    # Generate summary
    summary = {
        'total_vulnerabilities': len(detailed_analysis),
        'by_severity': {},
        'financial_impact_summary': {'HIGH': 0, 'MEDIUM': 0, 'LOW': 0},
        'update_info': {
            'package': args.package,
            'old_version': args.old_version,
            'new_version': args.new_version
        },
        'analysis_date': datetime.now().isoformat()
    }
    
    # Count by severity and financial impact
    for vuln in detailed_analysis:
        severity = vuln.get('severity', 'LOW').upper()
        summary['by_severity'][severity] = summary['by_severity'].get(severity, 0) + 1
        
        financial_level = vuln.get('financial_impact', {}).get('level', 'LOW')
        summary['financial_impact_summary'][financial_level] += 1
    
    # Create final report
    report = {
        'summary': summary,
        'vulnerabilities': detailed_analysis,
        'metadata': {
            'generated_by': 'CVE Analyzer v1.0',
            'generated_at': datetime.now().isoformat(),
            'source_report': args.input
        }
    }
    
    # Write output
    with open(args.output, 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f"CVE analysis completed: {args.output}")
    print(f"Total vulnerabilities: {summary['total_vulnerabilities']}")
    print(f"High financial impact: {summary['financial_impact_summary']['HIGH']}")

if __name__ == '__main__':
    main()