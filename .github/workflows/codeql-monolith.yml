# CodeQL Workflow for Monolithic Java Applications in BFSI
name: "CodeQL Advanced Security - Monolithic Java"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 2 * * 1'  # Weekly on Monday at 2:30 AM

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx4g -XX:+UseG1GC'
  CODEQL_THREADS: '4'
  CODEQL_RAM: '8192'

jobs:
  analyze:
    name: CodeQL Analysis - Monolithic Java
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Initialize CodeQL with enhanced configuration for monolithic apps
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-monolith-config.yml
        queries: security-extended,security-and-quality
        # Enhanced settings for large codebases
        ram: ${{ env.CODEQL_RAM }}
        threads: ${{ env.CODEQL_THREADS }}
        debug: true

    # Pre-build optimizations for monolithic applications
    - name: Pre-build optimization
      run: |
        echo "Optimizing build for CodeQL analysis..."
        # Check if there are any Java files to build
        if find . -name "*.java" -type f | head -1 | grep -q .; then
          echo "Java files found, proceeding with Maven build optimization..."
          # Check if pom.xml exists
          if [ -f "pom.xml" ]; then
            # Clean any previous build artifacts
            mvn clean
            # Pre-compile dependencies to speed up analysis
            mvn dependency:resolve dependency:resolve-sources || echo "Warning: Could not resolve dependencies"
            # Generate sources for better analysis coverage
            mvn generate-sources || echo "Warning: Could not generate sources"
          else
            echo "No pom.xml found in root directory, checking for other Maven projects..."
            find . -name "pom.xml" -exec dirname {} \; | while read -r dir; do
              echo "Found Maven project in: $dir"
              (cd "$dir" && mvn clean dependency:resolve dependency:resolve-sources generate-sources) || echo "Warning: Could not process $dir"
            done
          fi
        else
          echo "No Java files found in repository, skipping Maven optimization"
        fi

    # Build the application for analysis
    - name: Build monolithic application
      run: |
        echo "Building monolithic Java application..."
        # Check if there are Java files to build
        if find . -name "*.java" -type f | head -1 | grep -q .; then
          echo "Java files found, proceeding with build..."
          
          # Check if pom.xml exists in root
          if [ -f "pom.xml" ]; then
            echo "Building from root pom.xml..."
            # Use compile goal instead of package to reduce build time
            mvn compile test-compile -DskipTests -Dmaven.javadoc.skip=true || echo "Warning: Root build failed"
          else
            echo "No root pom.xml found, building individual Maven projects..."
          fi
          
          # Build specific modules if multi-module project
          if [ -f "modules.txt" ]; then
            while IFS= read -r module; do
              echo "Building module: $module"
              mvn compile -pl "$module" -DskipTests || echo "Warning: Module $module build failed"
            done < modules.txt
          fi
          
          # Find and build all Maven projects
          find . -name "pom.xml" -not -path "./target/*" | while read -r pom; do
            dir=$(dirname "$pom")
            if [ "$dir" != "." ]; then
              echo "Building Maven project in: $dir"
              (cd "$dir" && mvn compile test-compile -DskipTests -Dmaven.javadoc.skip=true) || echo "Warning: Build failed for $dir"
            fi
          done
        else
          echo "No Java files found in repository, skipping build step"
        fi

    # Perform CodeQL Analysis with BFSI-specific queries
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        # Generate SARIF for audit purposes
        output: codeql-results
        
    # Post-analysis processing for BFSI compliance
    - name: Process SARIF for Financial Compliance
      run: |
        echo "Processing SARIF results for financial compliance..."
        if [ -d "codeql-results" ] && find codeql-results -name "*.sarif" | head -1 | grep -q .; then
          echo "SARIF files found, processing for compliance..."
          # Process SARIF files for compliance reporting
          find codeql-results -name "*.sarif" -exec python3 .github/scripts/process-sarif.py {} \; || echo "Warning: SARIF processing failed"
          
          # Generate compliance report
          python3 .github/scripts/generate-compliance-report.py \
            --sarif-dir codeql-results \
            --output-dir compliance-reports \
            --standards "ISO27001,RBI-IT-Framework,SEBI-Guidelines" || echo "Warning: Compliance report generation failed"
        else
          echo "No SARIF files found, creating empty compliance reports directory"
          mkdir -p compliance-reports
          echo '{"message": "No security findings to report", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > compliance-reports/no-findings.json
        fi

    # Upload enhanced SARIF results
    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-sarif-${{ matrix.language }}
        path: |
          codeql-results/**/*.sarif
          compliance-reports/**/*.json
        retention-days: 30

    # Generate security metrics for BFSI
    - name: Generate Security Metrics
      if: always()
      run: |
        echo "Generating security metrics for BFSI applications..."
        mkdir -p security-metrics
        
        # Check if SARIF files exist
        if [ -d "codeql-results" ] && find codeql-results -name "*.sarif" | head -1 | grep -q .; then
          echo "SARIF files found, extracting metrics..."
          # Extract metrics from SARIF
          python3 .github/scripts/extract-security-metrics.py \
            --sarif-dir codeql-results \
            --output security-metrics/codeql-metrics.json || echo "Warning: Metrics extraction failed"
            
          # Generate dashboard data
          if [ -f "security-metrics/codeql-metrics.json" ]; then
            python3 .github/scripts/generate-dashboard-data.py \
              --metrics security-metrics/codeql-metrics.json \
              --output security-metrics/dashboard.html || echo "Warning: Dashboard generation failed"
            echo '{"status": "success", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > security-metrics/dashboard.json
          else
            echo '{"status": "no_metrics", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > security-metrics/dashboard.json
          fi
        else
          echo "No SARIF files found, creating empty metrics"
          echo '{"total_results": 0, "message": "No security findings", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > security-metrics/codeql-metrics.json
          echo '{"status": "no_findings", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > security-metrics/dashboard.json
        fi

    - name: Upload security metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-metrics-${{ matrix.language }}
        path: security-metrics/
        retention-days: 90

    # Quality gates for financial applications
    - name: Security Quality Gates
      run: |
        echo "Applying security quality gates for financial applications..."
        if [ -d "codeql-results" ] && find codeql-results -name "*.sarif" | head -1 | grep -q .; then
          echo "SARIF files found, applying quality gates..."
          python3 .github/scripts/security-quality-gates.py \
            --sarif-dir codeql-results \
            --fail-on-critical true \
            --fail-on-high true \
            --max-medium 5 \
            --compliance-standards "RBI,SEBI,ISO27001" || echo "Warning: Quality gates evaluation failed"
        else
          echo "No SARIF files found, quality gates passed by default"
        fi

    # Notification for security teams
    - name: Notify Security Team
      if: failure()
      run: |
        echo "Security scan failed - notifying security team..."
        # Add notification logic here (Slack, Teams, email, etc.)
        echo "Critical security issues found in CodeQL analysis"
        echo "Review the SARIF reports and compliance findings"