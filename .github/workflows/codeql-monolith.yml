# CodeQL Workflow for Monolithic Java Applications in BFSI
name: "CodeQL Advanced Security - Monolithic Java"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 2 * * 1'  # Weekly on Monday at 2:30 AM

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx4g -XX:+UseG1GC'
  CODEQL_THREADS: '4'
  CODEQL_RAM: '8192'

jobs:
  analyze:
    name: CodeQL Analysis - Monolithic Java
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Initialize CodeQL with enhanced configuration for monolithic apps
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-monolith-config.yml
        queries: security-extended,security-and-quality
        source-root: src
        # Enhanced settings for large codebases
        ram: ${{ env.CODEQL_RAM }}
        threads: ${{ env.CODEQL_THREADS }}
        debug: true

    # Pre-build optimizations for monolithic applications
    - name: Pre-build optimization
      run: |
        echo "Optimizing build for CodeQL analysis..."
        # Clean any previous build artifacts
        mvn clean
        # Pre-compile dependencies to speed up analysis
        mvn dependency:resolve dependency:resolve-sources
        # Generate sources for better analysis coverage
        mvn generate-sources

    # Build the application for analysis
    - name: Build monolithic application
      run: |
        echo "Building monolithic Java application..."
        # Use compile goal instead of package to reduce build time
        mvn compile test-compile -DskipTests -Dmaven.javadoc.skip=true
        
        # Build specific modules if multi-module project
        if [ -f "modules.txt" ]; then
          while IFS= read -r module; do
            echo "Building module: $module"
            mvn compile -pl "$module" -DskipTests
          done < modules.txt
        fi

    # Perform CodeQL Analysis with BFSI-specific queries
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        # Generate SARIF for audit purposes
        output: codeql-results
        
    # Post-analysis processing for BFSI compliance
    - name: Process SARIF for Financial Compliance
      run: |
        echo "Processing SARIF results for financial compliance..."
        if [ -d "codeql-results" ]; then
          # Process SARIF files for compliance reporting
          find codeql-results -name "*.sarif" -exec python3 .github/scripts/process-sarif.py {} \;
          
          # Generate compliance report
          python3 .github/scripts/generate-compliance-report.py \
            --sarif-dir codeql-results \
            --output-dir compliance-reports \
            --standards "ISO27001,RBI-IT-Framework,SEBI-Guidelines"
        fi

    # Upload enhanced SARIF results
    - name: Upload SARIF results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-sarif-${{ matrix.language }}
        path: |
          codeql-results/**/*.sarif
          compliance-reports/**/*.json
        retention-days: 30

    # Generate security metrics for BFSI
    - name: Generate Security Metrics
      if: always()
      run: |
        echo "Generating security metrics for BFSI applications..."
        mkdir -p security-metrics
        
        # Extract metrics from SARIF
        python3 .github/scripts/extract-security-metrics.py \
          --sarif-dir codeql-results \
          --output security-metrics/codeql-metrics.json
          
        # Generate dashboard data
        python3 .github/scripts/generate-dashboard-data.py \
          --metrics security-metrics/codeql-metrics.json \
          --output security-metrics/dashboard.json

    - name: Upload security metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-metrics-${{ matrix.language }}
        path: security-metrics/
        retention-days: 90

    # Quality gates for financial applications
    - name: Security Quality Gates
      run: |
        echo "Applying security quality gates for financial applications..."
        python3 .github/scripts/security-quality-gates.py \
          --sarif-dir codeql-results \
          --fail-on-critical true \
          --fail-on-high true \
          --max-medium 5 \
          --compliance-standards "RBI,SEBI,ISO27001"

    # Notification for security teams
    - name: Notify Security Team
      if: failure()
      run: |
        echo "Security scan failed - notifying security team..."
        # Add notification logic here (Slack, Teams, email, etc.)
        echo "Critical security issues found in CodeQL analysis"
        echo "Review the SARIF reports and compliance findings"