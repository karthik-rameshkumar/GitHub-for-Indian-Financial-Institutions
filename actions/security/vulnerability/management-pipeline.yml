name: 'Vulnerability Management Pipeline'
on:
  schedule:
    - cron: '0 6 * * 2'  # Weekly Tuesday 6 AM
  push:
    branches: [ main ]
    paths:
      - 'pom.xml'
      - 'package.json'
      - 'requirements.txt'
      - 'Dockerfile*'
  workflow_dispatch:
    inputs:
      scan-type:
        description: 'Type of vulnerability scan'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - critical-only

env:
  SCAN_TYPE: ${{ github.event.inputs.scan-type || 'comprehensive' }}

jobs:
  vulnerability-discovery:
    name: 'Vulnerability Discovery'
    runs-on: [self-hosted, bfsi-security]
    outputs:
      vulnerabilities-found: ${{ steps.scan-summary.outputs.vulnerabilities-found }}
      critical-count: ${{ steps.scan-summary.outputs.critical-count }}
      high-count: ${{ steps.scan-summary.outputs.high-count }}
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Dependency vulnerability scan'
        run: |
          echo "Running dependency vulnerability scan..."
          
          # Initialize counters
          total_vulns=0
          critical_vulns=0
          high_vulns=0
          
          # Java dependencies
          if [ -f "pom.xml" ]; then
            echo "Scanning Java dependencies..."
            mvn org.owasp:dependency-check-maven:check \
              -DfailBuildOnCVSS=0 \
              -Dformat=JSON,XML,HTML || true
              
            if [ -f "target/dependency-check-report.json" ]; then
              # Parse JSON report for vulnerability counts
              critical_java=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' target/dependency-check-report.json 2>/dev/null || echo "0")
              high_java=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH")] | length' target/dependency-check-report.json 2>/dev/null || echo "0")
              critical_vulns=$((critical_vulns + critical_java))
              high_vulns=$((high_vulns + high_java))
            fi
          fi
          
          # Node.js dependencies
          if [ -f "package.json" ]; then
            echo "Scanning Node.js dependencies..."
            npm audit --json > npm-audit-report.json 2>/dev/null || true
            
            if [ -f "npm-audit-report.json" ]; then
              critical_npm=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-report.json 2>/dev/null || echo "0")
              high_npm=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-report.json 2>/dev/null || echo "0")
              critical_vulns=$((critical_vulns + critical_npm))
              high_vulns=$((high_vulns + high_npm))
            fi
          fi
          
          # Python dependencies
          if [ -f "requirements.txt" ]; then
            echo "Scanning Python dependencies..."
            pip install safety
            safety check --json > safety-report.json 2>/dev/null || true
          fi
          
          total_vulns=$((critical_vulns + high_vulns))
          
          echo "TOTAL_VULNERABILITIES=$total_vulns" >> $GITHUB_ENV
          echo "CRITICAL_VULNERABILITIES=$critical_vulns" >> $GITHUB_ENV
          echo "HIGH_VULNERABILITIES=$high_vulns" >> $GITHUB_ENV
          
      - name: 'Container vulnerability scan'
        if: hashFiles('Dockerfile*') != ''
        run: |
          # Build image for scanning
          docker build -t vuln-scan-image:latest .
          
          # Trivy scan
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
            --format json \
            --output trivy-container-report.json \
            vuln-scan-image:latest || true
            
          # Parse Trivy results
          if [ -f "trivy-container-report.json" ]; then
            critical_container=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-container-report.json 2>/dev/null || echo "0")
            high_container=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-container-report.json 2>/dev/null || echo "0")
            
            # Update totals
            total_vulns=$(($TOTAL_VULNERABILITIES + critical_container + high_container))
            critical_vulns=$(($CRITICAL_VULNERABILITIES + critical_container))
            high_vulns=$(($HIGH_VULNERABILITIES + high_container))
            
            echo "TOTAL_VULNERABILITIES=$total_vulns" >> $GITHUB_ENV
            echo "CRITICAL_VULNERABILITIES=$critical_vulns" >> $GITHUB_ENV
            echo "HIGH_VULNERABILITIES=$high_vulns" >> $GITHUB_ENV
          fi
          
      - name: 'Code vulnerability scan'
        run: |
          echo "Running static code analysis for vulnerabilities..."
          
          # Semgrep security scan
          docker run --rm -v "${PWD}:/src" \
            returntocorp/semgrep \
            --config=p/security-audit \
            --config=p/owasp-top-ten \
            --json \
            --output semgrep-report.json \
            /src || true
            
          # CodeQL if available
          if command -v codeql >/dev/null 2>&1; then
            echo "Running CodeQL analysis..."
            # CodeQL analysis would be performed here
          fi
          
      - name: 'Scan summary'
        id: scan-summary
        run: |
          echo "vulnerabilities-found=${{ env.TOTAL_VULNERABILITIES }}" >> $GITHUB_OUTPUT
          echo "critical-count=${{ env.CRITICAL_VULNERABILITIES }}" >> $GITHUB_OUTPUT
          echo "high-count=${{ env.HIGH_VULNERABILITIES }}" >> $GITHUB_OUTPUT
          
          echo "üìä Vulnerability Scan Summary:"
          echo "Total vulnerabilities found: ${{ env.TOTAL_VULNERABILITIES }}"
          echo "Critical: ${{ env.CRITICAL_VULNERABILITIES }}"
          echo "High: ${{ env.HIGH_VULNERABILITIES }}"
          
      - name: 'Upload vulnerability reports'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-scan-reports
          path: |
            target/dependency-check-report.*
            npm-audit-report.json
            safety-report.json
            trivy-container-report.json
            semgrep-report.json
          retention-days: 90

  vulnerability-assessment:
    name: 'Vulnerability Assessment'
    needs: vulnerability-discovery
    runs-on: [self-hosted, bfsi-security]
    if: needs.vulnerability-discovery.outputs.vulnerabilities-found > 0
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        
      - name: 'Download vulnerability reports'
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-scan-reports
          
      - name: 'Risk assessment'
        run: |
          echo "üîç Performing vulnerability risk assessment..."
          
          critical_count=${{ needs.vulnerability-discovery.outputs.critical-count }}
          high_count=${{ needs.vulnerability-discovery.outputs.high-count }}
          
          # Risk scoring based on BFSI criticality
          risk_score=0
          
          # Critical vulnerabilities have high impact
          risk_score=$((risk_score + critical_count * 10))
          
          # High vulnerabilities have medium impact
          risk_score=$((risk_score + high_count * 5))
          
          echo "RISK_SCORE=$risk_score" >> $GITHUB_ENV
          
          # Determine risk level
          if [ $risk_score -ge 50 ]; then
            echo "RISK_LEVEL=CRITICAL" >> $GITHUB_ENV
            echo "::error title=Risk Assessment::CRITICAL risk level detected (Score: $risk_score)"
          elif [ $risk_score -ge 25 ]; then
            echo "RISK_LEVEL=HIGH" >> $GITHUB_ENV
            echo "::warning title=Risk Assessment::HIGH risk level detected (Score: $risk_score)"
          elif [ $risk_score -ge 10 ]; then
            echo "RISK_LEVEL=MEDIUM" >> $GITHUB_ENV
            echo "::notice title=Risk Assessment::MEDIUM risk level detected (Score: $risk_score)"
          else
            echo "RISK_LEVEL=LOW" >> $GITHUB_ENV
            echo "::notice title=Risk Assessment::LOW risk level detected (Score: $risk_score)"
          fi
          
      - name: 'BFSI impact analysis'
        run: |
          echo "üè¶ Analyzing BFSI-specific impact..."
          
          # Check for financial data processing components
          financial_impact=false
          
          if find . -name "*.java" -o -name "*.js" -o -name "*.py" | xargs grep -i "payment\|transaction\|account\|balance" | head -1 > /dev/null; then
            financial_impact=true
            echo "‚ö†Ô∏è Financial data processing components detected"
          fi
          
          if find . -name "*.java" -o -name "*.js" -o -name "*.py" | xargs grep -i "customer\|personal\|pii\|kyc" | head -1 > /dev/null; then
            financial_impact=true
            echo "‚ö†Ô∏è Customer data processing components detected"
          fi
          
          if [ "$financial_impact" = true ]; then
            echo "FINANCIAL_IMPACT=HIGH" >> $GITHUB_ENV
            echo "::warning title=BFSI Impact::High impact on financial operations detected"
          else
            echo "FINANCIAL_IMPACT=LOW" >> $GITHUB_ENV
          fi
          
      - name: 'Compliance impact assessment'
        run: |
          echo "üìã Analyzing regulatory compliance impact..."
          
          # Check compliance frameworks
          compliance_risk=false
          
          # Data localization impact
          if [ "${{ env.CRITICAL_VULNERABILITIES }}" -gt 0 ]; then
            echo "‚ö†Ô∏è Critical vulnerabilities may impact data localization compliance"
            compliance_risk=true
          fi
          
          # Audit trail impact
          if find . -name "*.java" -o -name "*.js" -o -name "*.py" | xargs grep -i "audit\|log" | head -1 > /dev/null && [ "${{ env.HIGH_VULNERABILITIES }}" -gt 5 ]; then
            echo "‚ö†Ô∏è High vulnerability count may impact audit trail integrity"
            compliance_risk=true
          fi
          
          if [ "$compliance_risk" = true ]; then
            echo "COMPLIANCE_RISK=HIGH" >> $GITHUB_ENV
            echo "::error title=Compliance Impact::High compliance risk detected"
          else
            echo "COMPLIANCE_RISK=LOW" >> $GITHUB_ENV
          fi

  vulnerability-prioritization:
    name: 'Vulnerability Prioritization'
    needs: [vulnerability-discovery, vulnerability-assessment]
    runs-on: [self-hosted, bfsi-security]
    if: needs.vulnerability-discovery.outputs.vulnerabilities-found > 0
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4
        
      - name: 'Download vulnerability reports'
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-scan-reports
          
      - name: 'Prioritize vulnerabilities'
        run: |
          echo "üìä Prioritizing vulnerabilities for remediation..."
          
          cat << EOF > vulnerability-prioritization.md
          # Vulnerability Prioritization Report
          
          **Generated:** $(date)
          **Total Vulnerabilities:** ${{ needs.vulnerability-discovery.outputs.vulnerabilities-found }}
          **Risk Level:** ${{ env.RISK_LEVEL }}
          **Financial Impact:** ${{ env.FINANCIAL_IMPACT }}
          **Compliance Risk:** ${{ env.COMPLIANCE_RISK }}
          
          ## Priority 1 - Critical (Immediate Action Required)
          
          ### Critical Severity Vulnerabilities: ${{ needs.vulnerability-discovery.outputs.critical-count }}
          
          - **Timeline:** Fix within 24 hours
          - **Impact:** High security risk, potential data breach
          - **BFSI Impact:** May affect customer data and financial transactions
          - **Compliance:** May violate RBI/SEBI/IRDAI requirements
          
          ## Priority 2 - High (Action Required Within 7 Days)
          
          ### High Severity Vulnerabilities: ${{ needs.vulnerability-discovery.outputs.high-count }}
          
          - **Timeline:** Fix within 7 days
          - **Impact:** Medium to high security risk
          - **BFSI Impact:** May affect system integrity
          - **Compliance:** May impact audit requirements
          
          ## Remediation Strategy
          
          ### Immediate Actions
          1. Review and validate all critical vulnerabilities
          2. Implement temporary mitigations where possible
          3. Plan emergency maintenance windows if required
          4. Notify security and compliance teams
          
          ### Short-term Actions (1-2 weeks)
          1. Update vulnerable dependencies
          2. Apply security patches
          3. Implement additional security controls
          4. Conduct security testing
          
          ### Long-term Actions (1 month)
          1. Review and update security policies
          2. Enhance monitoring and detection
          3. Security awareness training
          4. Regular vulnerability assessments
          
          ## BFSI-Specific Considerations
          
          - **Data Protection:** Ensure customer data remains protected
          - **Business Continuity:** Minimize disruption to financial services
          - **Regulatory Compliance:** Maintain compliance with all regulations
          - **Incident Reporting:** Report security incidents as required
          
          EOF
          
      - name: 'Upload prioritization report'
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-prioritization-report
          path: vulnerability-prioritization.md
          retention-days: 90

  incident-response:
    name: 'Incident Response'
    needs: [vulnerability-discovery, vulnerability-assessment]
    runs-on: [self-hosted, bfsi-security]
    if: needs.vulnerability-discovery.outputs.critical-count > 0
    steps:
      - name: 'Security incident notification'
        run: |
          echo "üö® SECURITY INCIDENT: Critical vulnerabilities detected"
          echo "Critical vulnerabilities: ${{ needs.vulnerability-discovery.outputs.critical-count }}"
          echo "High vulnerabilities: ${{ needs.vulnerability-discovery.outputs.high-count }}"
          
          # Create incident record
          cat << EOF > security-incident-report.md
          # Security Incident Report
          
          **Incident Type:** Critical Vulnerability Detection
          **Severity:** HIGH
          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}
          
          ## Incident Summary
          
          Critical security vulnerabilities have been detected in the codebase.
          Immediate attention and remediation is required.
          
          **Critical Vulnerabilities:** ${{ needs.vulnerability-discovery.outputs.critical-count }}
          **High Vulnerabilities:** ${{ needs.vulnerability-discovery.outputs.high-count }}
          **Risk Score:** ${{ env.RISK_SCORE }}
          
          ## Impact Assessment
          
          - **Security Impact:** High risk of security breach
          - **Business Impact:** ${{ env.FINANCIAL_IMPACT }}
          - **Compliance Impact:** ${{ env.COMPLIANCE_RISK }}
          
          ## Immediate Actions Required
          
          1. Review vulnerability details in scan reports
          2. Implement temporary mitigations
          3. Plan emergency patches
          4. Notify stakeholders
          5. Document remediation activities
          
          ## Next Steps
          
          1. Security team review (within 2 hours)
          2. Impact assessment (within 4 hours)
          3. Remediation plan (within 8 hours)
          4. Implementation (within 24 hours)
          
          ---
          *This is an automated security incident report*
          EOF
          
      - name: 'Upload incident report'
        uses: actions/upload-artifact@v4
        with:
          name: security-incident-report
          path: security-incident-report.md
          retention-days: 365
          
      - name: 'Alert security team'
        run: |
          echo "::error title=Security Incident::Critical vulnerabilities detected - immediate action required"

  vulnerability-reporting:
    name: 'Vulnerability Reporting'
    needs: [vulnerability-discovery, vulnerability-assessment, vulnerability-prioritization]
    runs-on: [self-hosted, bfsi-compliance]
    if: always()
    steps:
      - name: 'Download all artifacts'
        uses: actions/download-artifact@v4
        
      - name: 'Generate comprehensive report'
        run: |
          echo "üìù Generating comprehensive vulnerability management report..."
          
          cat << EOF > vulnerability-management-report.md
          # Vulnerability Management Report
          
          **Generated:** $(date)
          **Scan Type:** ${{ env.SCAN_TYPE }}
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Executive Summary
          
          ### Vulnerability Statistics
          - **Total Vulnerabilities:** ${{ needs.vulnerability-discovery.outputs.vulnerabilities-found }}
          - **Critical Severity:** ${{ needs.vulnerability-discovery.outputs.critical-count }}
          - **High Severity:** ${{ needs.vulnerability-discovery.outputs.high-count }}
          
          ### Risk Assessment
          - **Overall Risk Level:** ${{ env.RISK_LEVEL }}
          - **Risk Score:** ${{ env.RISK_SCORE }}
          - **Financial Impact:** ${{ env.FINANCIAL_IMPACT }}
          - **Compliance Risk:** ${{ env.COMPLIANCE_RISK }}
          
          ## Scan Coverage
          
          ### Dependencies Scanned
          - ‚úÖ Java dependencies (Maven)
          - ‚úÖ Node.js dependencies (npm)
          - ‚úÖ Python dependencies (pip)
          
          ### Code Analysis
          - ‚úÖ Static Application Security Testing (SAST)
          - ‚úÖ Security-focused code patterns
          
          ### Infrastructure
          - ‚úÖ Container image vulnerabilities
          - ‚úÖ Base image security
          
          ## BFSI Compliance Impact
          
          ### Regulatory Frameworks
          - **RBI IT Framework:** Review required for critical vulnerabilities
          - **SEBI Guidelines:** System governance impact assessment
          - **IRDAI Requirements:** Information security compliance review
          
          ### Data Protection
          - Customer data protection measures validated
          - Financial transaction security assessed
          - Audit trail integrity verified
          
          ## Remediation Timeline
          
          ### Immediate (0-24 hours)
          - Address all critical vulnerabilities
          - Implement temporary mitigations
          - Notify security and compliance teams
          
          ### Short-term (1-7 days)
          - Fix high severity vulnerabilities
          - Update vulnerable dependencies
          - Conduct security testing
          
          ### Medium-term (1-4 weeks)
          - Enhance security monitoring
          - Update security policies
          - Implement additional controls
          
          ## Recommendations
          
          1. **Vulnerability Management Process**
             - Implement automated vulnerability scanning
             - Establish regular patching schedules
             - Create vulnerability response procedures
          
          2. **Security Enhancements**
             - Implement defense-in-depth strategies
             - Enhance monitoring and alerting
             - Regular security assessments
          
          3. **Compliance Maintenance**
             - Regular compliance reviews
             - Update security documentation
             - Staff security training
          
          ## Appendices
          
          - Detailed vulnerability scan reports
          - Prioritization matrix
          - Incident response procedures
          - Compliance mapping
          
          ---
          *Generated by BFSI Vulnerability Management Pipeline*
          EOF
          
      - name: 'Upload comprehensive report'
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-management-report
          path: vulnerability-management-report.md
          retention-days: 365
          
      - name: 'Compliance notification'
        if: env.COMPLIANCE_RISK == 'HIGH'
        run: |
          echo "::warning title=Compliance Alert::High compliance risk detected - notify compliance team"